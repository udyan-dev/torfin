import 'package:flutter/material.dart';

import '../utils/extensions.dart';
import '../utils/string_constants.dart';

class AppText extends StatelessWidget {
  final String data;
  final TextStyle _baseStyle;
  final Color? color;
  final TextAlign? textAlign;
  final TextDirection? textDirection;
  final Locale? locale;
  final bool? softWrap;
  final TextOverflow? overflow;
  final TextScaler? textScaler;
  final int? maxLines;
  final String? semanticsLabel;
  final TextWidthBasis? textWidthBasis;
  final TextHeightBehavior? textHeightBehavior;
  final Color? selectionColor;

  const AppText._(
    this.data,
    this._baseStyle, {
    super.key,
    this.color,
    this.textAlign,
    this.textDirection,
    this.locale,
    this.softWrap,
    this.overflow,
    this.textScaler,
    this.maxLines,
    this.semanticsLabel,
    this.textWidthBasis,
    this.textHeightBehavior,
    this.selectionColor,
  });

  @override
  Widget build(BuildContext context) {
    return Text(
      data,
      key: key,
      style: _baseStyle.copyWith(color: color ?? context.colors.textPrimary),
      textAlign: textAlign,
      textDirection: textDirection,
      locale: locale,
      softWrap: softWrap,
      overflow: overflow,
      textScaler: textScaler,
      maxLines: maxLines,
      semanticsLabel: semanticsLabel,
      textWidthBasis: textWidthBasis,
      textHeightBehavior: textHeightBehavior,
      selectionColor: selectionColor,
    );
  }

  const AppText.code01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexMono,
           fontSize: 12,
           height: 16 / 12,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.32,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.code02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexMono,
           fontSize: 14,
           height: 20 / 14,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.32,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.label01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 12,
           height: 16 / 12,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.32,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.label02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 18 / 14,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.helperText01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 12,
           height: 16 / 12,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.32,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.helperText02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 18 / 14,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.legal01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 12,
           height: 16 / 12,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.32,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.legal02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 18 / 14,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.bodyCompact01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 18 / 14,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.bodyCompact02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 16,
           height: 22 / 16,
           fontWeight: FontWeight.w400,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.body01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 20 / 14,
           fontWeight: FontWeight.w400,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.body02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 16,
           height: 24 / 16,
           fontWeight: FontWeight.w400,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.headingCompact01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 18 / 14,
           fontWeight: FontWeight.w600,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.headingCompact02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 16,
           height: 22 / 16,
           fontWeight: FontWeight.w600,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading01(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 14,
           height: 20 / 14,
           fontWeight: FontWeight.w600,
           letterSpacing: 0.16,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading02(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 16,
           height: 24 / 16,
           fontWeight: FontWeight.w600,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading03(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 20,
           height: 28 / 20,
           fontWeight: FontWeight.w400,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading04(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 28,
           height: 36 / 28,
           fontWeight: FontWeight.w400,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading05(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 32,
           height: 40 / 32,
           fontWeight: FontWeight.w400,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading06(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 42,
           height: 50 / 42,
           fontWeight: FontWeight.w300,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );

  const AppText.heading07(
    String data, {
    Key? key,
    Color? color,
    TextAlign? textAlign,
    TextDirection? textDirection,
    Locale? locale,
    bool? softWrap,
    TextOverflow? overflow,
    TextScaler? textScaler,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? selectionColor,
  }) : this._(
         data,
         const TextStyle(
           fontFamily: ibmPlexSans,
           fontSize: 54,
           height: 64 / 54,
           fontWeight: FontWeight.w300,
           letterSpacing: 0,
         ),
         key: key,
         color: color,
         textAlign: textAlign,
         textDirection: textDirection,
         locale: locale,
         softWrap: softWrap,
         overflow: overflow,
         textScaler: textScaler,
         maxLines: maxLines,
         semanticsLabel: semanticsLabel,
         textWidthBasis: textWidthBasis,
         textHeightBehavior: textHeightBehavior,
         selectionColor: selectionColor,
       );
}
